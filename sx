#!/bin/bash

# sx - Interactive SSH connection selector
# Usage: sx [options]
# 
# Options:
#   -i, --import FILE    Import FileZilla XML file
#   -l, --list          List all servers
#   -h, --help          Show help
#   -v, --version       Show version

set -euo pipefail

VERSION="1.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="${HOME}/.config/sx"
SERVERS_FILE="${CONFIG_DIR}/servers"
FILEZILLA_XML=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Check dependencies
check_dependencies() {
    local missing=()
    
    if ! command -v fzf &> /dev/null; then
        missing+=("fzf")
    fi
    
    if ! command -v ssh &> /dev/null; then
        missing+=("ssh")
    fi
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        log_error "Missing dependencies: ${missing[*]}"
        log_info "Install with: apt install fzf openssh-client (Ubuntu/Debian)"
        log_info "Or: brew install fzf openssh (macOS)"
        exit 1
    fi
}

# Create config directory
setup_config() {
    if [[ ! -d "${CONFIG_DIR}" ]]; then
        mkdir -p "${CONFIG_DIR}"
        log_info "Created config directory: ${CONFIG_DIR}"
    fi
    
    if [[ ! -f "${SERVERS_FILE}" ]]; then
        touch "${SERVERS_FILE}"
        log_info "Created servers file: ${SERVERS_FILE}"
    fi
}

# Parse FileZilla XML and extract server information
parse_filezilla_xml() {
    local xml_file="$1"
    local temp_file="${CONFIG_DIR}/servers.tmp"
    
    if [[ ! -f "${xml_file}" ]]; then
        log_error "FileZilla XML file not found: ${xml_file}"
        exit 1
    fi
    
    log_info "Parsing FileZilla XML file: ${xml_file}"
    
    # Clear temp file
    > "${temp_file}"
    
    # Extract server information using awk for better XML parsing
    # Parse each <Server>...</Server> block individually
    awk '
    /<Server>/ { 
        server = ""
        host = ""
        user = ""
        port = ""
        name = ""
        protocol = ""
        in_server = 1
    }
    in_server && /<Host>/ { 
        gsub(/.*<Host>/, "", $0)
        gsub(/<\/Host>.*/, "", $0)
        host = $0
    }
    in_server && /<User>/ { 
        gsub(/.*<User>/, "", $0)
        gsub(/<\/User>.*/, "", $0)
        user = $0
    }
    in_server && /<Port>/ { 
        gsub(/.*<Port>/, "", $0)
        gsub(/<\/Port>.*/, "", $0)
        port = $0
    }
    in_server && /<Name>/ { 
        gsub(/.*<Name>/, "", $0)
        gsub(/<\/Name>.*/, "", $0)
        name = $0
    }
    in_server && /<Protocol>/ { 
        gsub(/.*<Protocol>/, "", $0)
        gsub(/<\/Protocol>.*/, "", $0)
        protocol = $0
    }
    /<\/Server>/ { 
        if (in_server && host != "" && (protocol == "1" || protocol == "")) {
            if (port == "") port = "22"
            if (user == "") user = "root"
            if (name == "") name = host
            print name "|" user "@" host ":" port "|" host "|" user "|" port
        }
        in_server = 0
    }
    ' "${xml_file}" > "${temp_file}"
    
    # Remove duplicates and sort
    sort -u "${temp_file}" > "${SERVERS_FILE}"
    rm -f "${temp_file}"
    
    local count
    count=$(wc -l < "${SERVERS_FILE}")
    log_success "Imported ${count} servers from FileZilla"
}

# Add a server manually
add_server() {
    local name="$1"
    local host="$2"
    local user="${3:-root}"
    local port="${4:-22}"
    
    echo "${name}|${user}@${host}:${port}|${host}|${user}|${port}" >> "${SERVERS_FILE}"
    log_success "Added server: ${name}"
}

# List all servers
list_servers() {
    if [[ ! -s "${SERVERS_FILE}" ]]; then
        log_warn "No servers found. Import from FileZilla or add manually."
        return 1
    fi
    
    echo "Available servers:"
    while IFS='|' read -r name connection host user port; do
        printf "  %-20s %s\n" "${name}" "${connection}"
    done < "${SERVERS_FILE}"
}

# Interactive server selection with fzf
interactive_select() {
    if [[ ! -s "${SERVERS_FILE}" ]]; then
        log_error "No servers found. Import from FileZilla XML first:"
        log_info "sx --import /path/to/filezilla/export.xml"
        return 1
    fi
    
    local selected
    selected=$(awk -F'|' '{printf "%s (%s)\t%s\t%s\t%s\t%s\n", $1, $2, $1, $3, $4, $5}' "${SERVERS_FILE}" | \
        fzf --delimiter='\t' \
            --with-nth=1 \
            --preview='echo "Name: {2}"; echo "Host: {3}"; echo "User: {4}"; echo "Port: {5}"' \
            --preview-window=right:30% \
            --header='Select SSH server (Press Enter to connect, Esc to cancel)' \
            --border \
            --height=60% \
            --layout=reverse \
            --bind='ctrl-r:reload(awk -F"|" "{printf \"%s (%s)\\t%s\\t%s\\t%s\\t%s\\n\", \$1, \$2, \$1, \$3, \$4, \$5}" '"${SERVERS_FILE}"')' \
            --prompt='SSH> ')
    
    if [[ -n "${selected}" ]]; then
        local display name host user port
        IFS=$'\t' read -r display name host user port <<< "${selected}"
        
        log_info "Connecting to ${name} (${user}@${host}:${port})"
        
        # Build SSH command
        local ssh_cmd="ssh"
        
        # Add port if not default
        if [[ "${port}" != "22" ]]; then
            ssh_cmd="${ssh_cmd} -p ${port}"
        fi
        
        # Add user and host
        ssh_cmd="${ssh_cmd} ${user}@${host}"
        
        # Execute SSH connection
        exec ${ssh_cmd}
    fi
}

# Show help
show_help() {
    cat << EOF
sx - Interactive SSH connection selector

USAGE:
    sx [OPTIONS]

OPTIONS:
    -i, --import FILE    Import servers from FileZilla XML export
    -a, --add NAME HOST [USER] [PORT]
                        Add server manually
    -l, --list          List all available servers
    -h, --help          Show this help message
    -v, --version       Show version information

EXAMPLES:
    sx                          # Interactive server selection
    sx --import filezilla.xml   # Import from FileZilla export
    sx --add "my-server" "192.168.1.100" "admin" "2222"
    sx --list                   # List all servers

KEY BINDINGS (in interactive mode):
    Enter           Connect to selected server
    Ctrl+R          Reload server list
    Ctrl+E          Copy connection string to clipboard
    Esc/Ctrl+C      Cancel selection

SETUP:
    Run the installer for automatic setup:
    
    ./install.sh
    
    Or manually add to ~/.bashrc:
    source ~/.config/sx/sx-integration.sh

FILEZILLA EXPORT:
    1. Open FileZilla
    2. File -> Export...
    3. Select "Export site manager entries"
    4. Save as XML file
    5. Run: sx --import exported_file.xml

REPOSITORY:
    https://github.com/mart337i/sx

EOF
}

# Main function
main() {
    check_dependencies
    setup_config
    
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            echo "sx version ${VERSION}"
            exit 0
            ;;
        -i|--import)
            if [[ -z "${2:-}" ]]; then
                log_error "Please specify FileZilla XML file"
                log_info "Usage: sx --import /path/to/filezilla.xml"
                exit 1
            fi
            parse_filezilla_xml "$2"
            ;;
        -a|--add)
            if [[ $# -lt 3 ]]; then
                log_error "Please specify name and host"
                log_info "Usage: sx --add NAME HOST [USER] [PORT]"
                exit 1
            fi
            add_server "$2" "$3" "${4:-root}" "${5:-22}"
            ;;
        -l|--list)
            list_servers
            ;;
        "")
            interactive_select
            ;;
        *)
            log_error "Unknown option: $1"
            log_info "Use 'sx --help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
