#!/bin/bash

# sx - Interactive SSH connection selector
set -euo pipefail

VERSION="1.0.0"
CONFIG_DIR="${HOME}/.config/sx"
SERVERS_FILE="${CONFIG_DIR}/servers"

# Setup config directory
[[ ! -d "${CONFIG_DIR}" ]] && mkdir -p "${CONFIG_DIR}"
[[ ! -f "${SERVERS_FILE}" ]] && touch "${SERVERS_FILE}"

# Check dependencies
check_deps() {
    command -v fzf >/dev/null || { echo "Error: fzf is required. Install with: apt install fzf"; exit 1; }
    command -v ssh >/dev/null || { echo "Error: ssh is required"; exit 1; }
}

# Interactive server selection
select_server() {
    local query="${1:-}"
    
    [[ ! -s "${SERVERS_FILE}" ]] && { echo "No servers found. Use: sx --import file.xml"; exit 1; }
    
    local servers
    if [[ -n "${query}" ]]; then
        servers=$(awk -F'|' -v q="${query}" 'tolower($0) ~ tolower(q) {print $1 " (" $2 ")"}' "${SERVERS_FILE}")
        [[ -z "${servers}" ]] && { echo "No servers match: ${query}"; exit 1; }
        
        # Auto-connect if single match
        local count=$(echo "${servers}" | wc -l)
        if [[ ${count} -eq 1 ]]; then
            local name=$(echo "${servers}" | cut -d' ' -f1)
            connect_server "${name}"
            return
        fi
    else
        servers=$(awk -F'|' '{print $1 " (" $2 ")"}' "${SERVERS_FILE}")
    fi
    
    local selected=$(echo "${servers}" | fzf --prompt="SSH> " --height=60% --layout=reverse --preview='name=$(echo {} | cut -d" " -f1); grep "^$name|" '"${SERVERS_FILE}"' | cut -d"|" -f3,4,5 | sed "s/^/Host: /; s/|/\nUser: /; s/|/\nPort: /"' --preview-window=right:30%)
    [[ -n "${selected}" ]] && connect_server "$(echo "${selected}" | cut -d' ' -f1)"
}

# Connect to server
connect_server() {
    local name="$1"
    local line=$(grep "^${name}|" "${SERVERS_FILE}" | head -1)
    [[ -z "${line}" ]] && { echo "Server not found: ${name}"; exit 1; }
    
    IFS='|' read -r _ _ host user port <<< "${line}"
    
    local cmd="ssh"
    [[ "${port}" != "22" ]] && cmd="${cmd} -p ${port}"
    cmd="${cmd} ${user}@${host}"
    
    echo "Connecting to ${name}..."
    exec ${cmd}
}

# Import FileZilla XML
import_filezilla() {
    local xml="$1"
    [[ ! -f "${xml}" ]] && { echo "File not found: ${xml}"; exit 1; }
    
    awk '/<Server>/ { server=""; host=""; user=""; port=""; name=""; in_server=1 }
         in_server && /<Host>/ { gsub(/.*<Host>/, ""); gsub(/<\/Host>.*/, ""); host=$0 }
         in_server && /<User>/ { gsub(/.*<User>/, ""); gsub(/<\/User>.*/, ""); user=$0 }
         in_server && /<Port>/ { gsub(/.*<Port>/, ""); gsub(/<\/Port>.*/, ""); port=$0 }
         in_server && /<Name>/ { gsub(/.*<Name>/, ""); gsub(/<\/Name>.*/, ""); name=$0 }
         /<\/Server>/ { 
             if (host && (port=="" && (port="22")) && (user=="" && (user="root")) && (name=="" && (name=host)))
                 print name "|" user "@" host ":" port "|" host "|" user "|" port
             in_server=0 
         }' "${xml}" | sort -u >> "${SERVERS_FILE}"
    
    echo "Imported $(wc -l < "${SERVERS_FILE}") servers"
}

# Import SSH config file
import_ssh_config() {
    local config="${1:-~/.ssh/config}"
    # Expand tilde
    config="${config/#\~/$HOME}"
    [[ ! -f "${config}" ]] && { echo "File not found: ${config}"; exit 1; }
    
    awk '/^Host / && !/\*/ { 
        if (host && hostname) {
            if (!user) user="root"
            if (!port) port="22"
            print host "|" user "@" hostname ":" port "|" hostname "|" user "|" port
        }
        host=$2; hostname=""; user=""; port=""
    }
    /^[[:space:]]*HostName/ { hostname=$2 }
    /^[[:space:]]*User/ { user=$2 }  
    /^[[:space:]]*Port/ { port=$2 }
    END {
        if (host && hostname) {
            if (!user) user="root"
            if (!port) port="22"
            print host "|" user "@" hostname ":" port "|" hostname "|" user "|" port
        }
    }' "${config}" | sort -u >> "${SERVERS_FILE}"
    
    echo "Imported $(wc -l < "${SERVERS_FILE}") servers"
}

# Add server
add_server() {
    local name="$1" host="$2" user="${3:-root}" port="${4:-22}"
    echo "${name}|${user}@${host}:${port}|${host}|${user}|${port}" >> "${SERVERS_FILE}"
    echo "Added: ${name}"
}

# List servers
list_servers() {
    [[ ! -s "${SERVERS_FILE}" ]] && { echo "No servers configured"; exit 1; }
    awk -F'|' '{printf "%-20s %s\n", $1, $2}' "${SERVERS_FILE}"
}

# Show help
show_help() {
    cat << 'EOF'
sx - SSH connection selector

USAGE:
    sx [search]             # Interactive selection (with optional search)
    sx --import FILE        # Import FileZilla XML
    sx --ssh-config [FILE]  # Import SSH config (default: ~/.ssh/config)
    sx --add NAME HOST [USER] [PORT]  # Add server
    sx --list              # List servers
    sx --help              # Show help
    sx --version           # Show version

EXAMPLES:
    sx                     # Show all servers
    sx prod                # Filter for "prod" servers
    sx --import sites.xml  # Import from FileZilla
    sx --ssh-config        # Import from ~/.ssh/config
    sx --add web 1.2.3.4 admin 22

HOTKEY:
    Ctrl+K opens sx (after running: source ~/.config/sx/sx-integration.sh)

EOF
}

# Main
check_deps

case "${1:-}" in
    --help|-h) show_help ;;
    --version|-v) echo "sx ${VERSION}" ;;
    --import|-i) import_filezilla "$2" ;;
    --ssh-config) import_ssh_config "${2:-}" ;;
    --add|-a) add_server "$2" "$3" "${4:-root}" "${5:-22}" ;;
    --list|-l) list_servers ;;
    -*) echo "Unknown option: $1. Use --help for usage."; exit 1 ;;
    *) select_server "$*" ;;
esac